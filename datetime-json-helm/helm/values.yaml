name: datetime-json
image: 152493160469.dkr.ecr.us-east-1.amazonaws.com/ecr-blizz-ue1
imageTag: 1.0.0

namespace: blizzard

# The deploymentEnvironment is prepended to the name to define the namespace
# e.g. "dev-foobar-container-name"
deploymentEnvironment: dev # dev, qa, or prod

# List your normal environment variables here
environmentVariables:
  LOGGER_LEVEL: INFO # WARN, INFO, DEBUG

# Environment variables that need to be secured should use external secrets
# for more info on how to create an ASM Secret.
# externalSecret: [Secret Name]

# Configure the number of replicas that should be deployed
replicas: 0

# Configure the requests and limits for resource utilization
# (as a best practice, values for limits and requests should be the same)
resources:
  limits:
    cpu: 100m
    memory: 50Mi
  requests:
    cpu: 100m
    memory: 50Mi

service:
  # Enable service if the deployment exposes a service endpoint, such as a REST API
  # It is required for public and private ingress
  # Within the K8s cluster, the service is accessible at "<name>.<namespace>.svc.cluster.local:<servicePort>"
  enabled: true
  servicePort: 5000

  # Enable public ingress if the service should also be accessible from the Internet
  publicIngress:
    enabled: false
    # If enabled, the hostName must be registered in Route 53 under the "external.dnsname.io" domain
    # From the Internet, the service is accessible at "https://<hostName>.external.dnsname.io:443"
    hostName:

  # Enable private ingress if the service should also be accessible from within the VPC, outside of K8s
  privateIngress:
    enabled: false
    # If enabled, the hostName must be registered in Route 53 under the "internal.dnsname.io" domain
    # Within the VPC (or a peered VPC), the service is accessible at "https://<hostName>.internal.dnsname.io:443"
    hostName:

# Set the following option to "true" to enable readiness and liveness health checks on the /healthz
# endpoint
healthProbes:
  enabled: false
  #readinessProbe:
    #httpGet:
      #path: /healthz
      #port: 9000
    #initialDelaySeconds: 15
    #periodSeconds: 1
    #failureThreshold: 2
    #timeoutSeconds: 30
  #livenessProbe:
    #httpGet:
      #path: /healthz
      #port: 9000
    #initialDelaySeconds: 30
    #periodSeconds: 5
    #failureThreshold: 12
    #timeoutSeconds: 1

# If your pod needs direct access to AWS resources, then you should run it under the context
# of an IAM Role configured with least-privilege access to the securable(s). For new IAM Roles,
# format the name as "iam-<container name>-<dev | qa | prod>". Note that the IAM role will
# require its trust relationship to be edited in AWS so that the corresponding Kubernetes cluster
# will be able to impersonate it. Plese :
#
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Principal": {
#         "AWS": "<ARN of node instance role for the existing EKS cluster>"
#       },
#       "Action": "sts:AssumeRole"
#     }
#   ]
# }
#
# Enter the ARN of the new IAM role below.
# iamRoleArn: 
